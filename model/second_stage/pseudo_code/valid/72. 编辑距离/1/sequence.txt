def minDistance(self, word1, word2):
    n为第一个单词word1的长度，m为第二个单词word2的长度
    if (第一个单词的长度或第二个单词的长度为0)
        output:  返回第一个单词的长度加第二个单词的长度
    else:
        初始化全零矩阵D，第一维长度等于第一个单词的长度加1，第二维长度等于第二个单词的长度加一，D[i][j]表示第一个单词的前i个字母和第二个单词的前j个字母之间的编辑距离
        初始化dp第一列，i为dp第一维的下标
        while(i小于第一个单词的长度加一)
            第一个单词的前i个字母需要执行i次删除操作才能得到空字符
            dp第一维的下标向右移动一个单位
        初始化dp第一行，j为dp第二维的下标
        while(第二维的下标小于第二个单词的长度加一)
            当第一个单词为空字符时，需要执行j次插入操作才能得到第二个单词的前j个字母
            第二维的下标向右移动一个单位
        行号i等于1
        while(行号小于第一个单词的长度加1)
            列号j等于1
            while(列号小于第二个单词的长度加1)
                left等于D当前位置左侧元素加一
                down等于D当前位置下方元素加一
                left_down等于D当前位置左下方元素
                if (若第一个单词中下标为i减去1的字符等于第二个单词中下标为j减去1的字符)
                    left_down等于其自身加1
                else:
                第一个单词的前i个字母和第二个单词的前j个字母之间的编辑距离等于left,down和left_down中的最小值加一
                列号自增1
            行号自增1
        output:  返回word1到word2的编辑距离
