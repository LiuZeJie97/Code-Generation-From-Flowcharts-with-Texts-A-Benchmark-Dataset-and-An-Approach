def minDistance(self, word1, word2):
    n1为第一个单词word1的长度，n2为第二个单词word2的长度
    初始化全零矩阵dp，第一维长度等于第一个单词的长度加1，第二维长度等于第二个单词的长度加一。dp[i][j]表示word1[0,...,i]到word2[0,...,j]的编辑距离
    i等于0，为dp第二维的下标
    while(第二维的下标小于第二个单词的长度加1)
        当第一个单词为空字符时，需要执行i次插入操作才能得到第二个单词的前i位字符
        第二维的下标向右移动1个单位
    i等于0，为dp第一维的下标
    while(第一维的下标小于第一个单词的长度加1)
        word1[0,...,i]需要执行i次删除操作才能得到空字符，据此初始化初始化dp第一列
        第一维的下标向右移动1个单位
    行号i等于1
    while(行号小于第一个单词的长度加1)
        列号j等于1
        while(列号小于第二个单词的长度加1)
            if (若第一个单词中下标为i减去1的字符等于第二个单词中下标为j减去1的字符)
                此时第一个单词word1[0,...,i]到第二个单词word2[0,...,j]的编辑距离等于word1[0,...,i-1]到word2[0,...,j-1]的编辑距离
            else:
                word1[0,...,i]到word2[0,...,j]的编辑距离等于dp[i1][j1],dp[i][j1]和dp[i1][j])中的最小值加一
            处理下一列
        处理下一行
    output:  返回第一个单词到第二个单词的编辑距离
