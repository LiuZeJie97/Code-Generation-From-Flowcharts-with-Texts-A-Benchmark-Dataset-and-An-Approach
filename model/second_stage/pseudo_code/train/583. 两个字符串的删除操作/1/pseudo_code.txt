NSpace
0
1
1
1
1
2
2
1
1
2
2
1
1
2
2
3
4
3
4
3
2
1

GUID
None
op23692
op23694
op23696
cond23699
op23706
op1
op23710
cond23713
op23720
op2
op23724
cond23727
op23766
cond23769
cond23787
op23791
None
op23795
op4
op3
io23805

Str
def minDistance(self, word1, word2):@
m为字符串word1的长度，n为字符串word2的长度@
定义二维分别是m+1,n+1的二维数组dp，其初值均为0，dp[i][j]表示使字符串word1[0:i]和字符串word2[0:j]相同所需的最小步数@
i为数组下标，初值为1@
while(i小于字符串word1的长度加一)@
使字符串word1[0:i]和空字符串相同所需的最小步数等于i@
数组下标i增加1@
j为数组下标，初值为1@
while(j小于字符串word2的长度加一)@
使空字符串和字符串word2[0:j]相同所需的最小步数等于j@
数组下标j增加1@
i为数组下标，初值为1@
while(i小于字符串word1的长度加一)@
j为数组下标，初值为1@
while(j小于字符串word2的长度加一)@
if (字符串word1中下标为i-1的字符与字符串word2中下标为j-1的字符相同)@
使字符串word1[0:i]和字符串word2[0:j]相同所需的最小步数等于使字符串word1[0:i-1]和字符串word2[0:j-1]相同所需的最小步数@
else:@
计算使字符串word1[0:i-1]和字符串word2[0:j]相同所需的最小步数与使字符串word1[0:i]和字符串word2[0:j-1]相同所需的最小步数之间的最小值，使字符串word1[0:i]和字符串word2[0:j]相同所需的最小步数等于该最小值加一@
数组下标j增加1@
数组下标i增加1@
output:  返回使得字符串word1与字符串word2相同所需的最小步数@

Type
Function
Effect
Effect
Effect
While
Effect
Effect
Effect
While
Effect
Effect
Effect
While
Effect
While
If
Effect
Else
Effect
Effect
Effect
Effect
