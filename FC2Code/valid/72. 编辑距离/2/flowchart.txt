cond6383=>condition: 若第一个单词中下标为i减去1的字符等于第二个单词中下标为j减去1的字符
op6302=>operation: 当第一个单词为空字符时，需要执行i次插入操作才能得到第二个单词的前i位字符
op1=>operation: 第二维的下标向右移动1个单位
cond6323=>condition: 行号小于第一个单词的长度加1
cond6295=>condition: 第二维的下标小于第二个单词的长度加1
op6391=>operation: word1[0,...,i]到word2[0,...,j]的编辑距离等于dp[i1][j1],dp[i][j1]和dp[i1][j])中的最小值加一
op6320=>operation: 行号i等于1
op6292=>operation: i等于0，为dp第二维的下标
op6362=>operation: 列号j等于1
op6316=>operation: word1[0,...,i]需要执行i次删除操作才能得到空字符，据此初始化初始化dp第一列
op6290=>operation: 初始化全零矩阵dp，第一维长度等于第一个单词的长度加1，第二维长度等于第二个单词的长度加一。dp[i][j]表示word1[0,...,i]到word2[0,...,j]的编辑距离
io6401=>inputoutput: output:  返回第一个单词到第二个单词的编辑距离
op3=>operation: 处理下一行
st6283=>start: start minDistance
op2=>operation: 第一维的下标向右移动1个单位
cond6309=>condition: 第一维的下标小于第一个单词的长度加1
op6288=>operation: n1为第一个单词word1的长度，n2为第二个单词word2的长度
cond6365=>condition: 列号小于第二个单词的长度加1
io6285=>inputoutput: input: self, word1, word2
op4=>operation: 处理下一列
op6306=>operation: i等于0，为dp第一维的下标
op6387=>operation: 此时第一个单词word1[0,...,i]到第二个单词word2[0,...,j]的编辑距离等于word1[0,...,i-1]到word2[0,...,j-1]的编辑距离
e6399=>end: end function return

op6292->cond6295
cond6365(yes)->cond6383
io6401->e6399
cond6295(yes)->op6302
io6285->op6288
cond6365(no)->op3
op6391->op4
cond6323(yes)->op6362
op2->cond6309
op6362->cond6365
op3->cond6323
op6302->op1
op6387->op4
op6306->cond6309
cond6309(no)->op6320
op6320->cond6323
op6288->op6290
op4->cond6365
cond6383(yes)->op6387
op6316->op2
st6283->io6285
cond6295(no)->op6306
op1->cond6295
cond6383(no)->op6391
op6290->op6292
cond6309(yes)->op6316
cond6323(no)->io6401
