st1180=>start: start minCut
cond1256=>condition: 字符串子串的开始索引小于j加1
e1310=>end: end function return
op1185=>operation: 初始化最小分割次数数组min_cut={0,1,2, ,n1}，长度为字符串s的长度。其中min_cut[i]表示s[0, ,i]的最小分割次数。初始化的含义为，s[0]只有一个字符，不需要分割，因此min_cut[0]=0，s[0,1]最多需要1次，分成两个单独的字符。s[0,1,2]需要三次。以此类推。
cond1194=>condition: 下标j小于字符串的长度
op1295=>operation: 0到j位置的子串不需要进行切割，自身就是回文子串。
op1299=>operation: 0到j位置的子串的最小分割次数等于自身和上一回文串位置的切割次数加1中的最小值。
op1191=>operation: j为字符串下标，初值等于0
op1253=>operation: 定义i为字符串子串的开始索引
op2=>operation: 开始索引向后移动一位
cond1291=>condition: 开始索引为0
io1182=>inputoutput: input: self, s
op1288=>operation: 字符串s[i, ,j]为回文子串
op1189=>operation: 初始化dp=[[False, ,False], ,[False, ,False]],为nn维数组。其中dp[i][j]表示字符串s[i, ,j]是否为回文串。
op1187=>operation: 字符串s的长度为n。
io1312=>inputoutput: output:  返回将整个数组作为子串时的最小分割次数
cond1284=>condition: 若字符串下标为i的数和下标为j的数相等，并且（j减去i小于2\xa0或者\xa0s[i+1, ,j-1]是回文串）
op1=>operation: 下标j向后移动一位

cond1256(no)->op1
op1191->cond1194
op1189->op1191
op1187->op1189
cond1291(no)->op1299
cond1194(no)->io1312
cond1256(yes)->cond1284
op1->cond1194
cond1291(yes)->op1295
op1299->op2
st1180->io1182
op1288->cond1291
op2->cond1256
io1182->op1185
op1295->op2
cond1284(yes)->op1288
op1253->cond1256
io1312->e1310
cond1284(no)->op2
cond1194(yes)->op1253
op1185->op1187
