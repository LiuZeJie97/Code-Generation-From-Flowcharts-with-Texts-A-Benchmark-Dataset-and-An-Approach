def canPartition(self, nums: List[int]) -> bool:    #io4632
    n = len(nums)    #op4635
    if n < 2:    #cond4638
        return False    #io4645
    total = sum(nums)    #op4651
    maxNum = max(nums)    #op4653
    if total & 1:    #cond4656
        return False    #io4663
    target = total // 2    #op4669
    if maxNum > target:    #cond4672
        return False    #io4679
    dp = [[False] * (target + 1) for _ in range(n)]    #op4685
    for i in range(n):    #cond4690
        dp[i][0] = True    #op4697
    dp[0][nums[0]] = True    #op4701
    for i in range(1, n):    #cond4706
        num = nums[i]    #op4747
        for j in range(1, target + 1):    #cond4752
            if j >= num:    #cond4770
                dp[i][j] = dp[i - 1][j] | dp[i - 1][j - num]    #op4774
            else:    #None
                dp[i][j] = dp[i - 1][j]    #op4778
    return dp[n - 1][target]    #io4788
