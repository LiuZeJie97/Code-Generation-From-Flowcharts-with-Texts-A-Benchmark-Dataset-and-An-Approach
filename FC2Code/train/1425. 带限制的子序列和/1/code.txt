def constrainedSubsetSum(self, a: List[int], k: int) -> int:
    n = len(a)
    f = [0] * n
    f[0] = a[0]
    q = collections.deque()
    q.append(0)
    m = a[0]
    for i in range(1, n):
        while q and i - q[0] > k:
            q.popleft()
        f[i] = max(f[q[0]], 0) + a[i]
        m = max(m, f[i])
        while q and f[i] >= f[q[-1]]:
            q.pop()
        q.append(i)
    return m
