def constrainedSubsetSum(self, a: List[int], k: int) -> int:    #io12382
    n = len(a)    #op12385
    f = [0] * n    #op12387
    f[0] = a[0]    #op12389
    q = collections.deque()    #op12391
    q.append(0)    #op12393
    m = a[0]    #op12395
    for i in range(1, n):    #cond12400
        while q and i - q[0] > k:    #cond12436
            q.popleft()    #op12443
        f[i] = max(f[q[0]], 0) + a[i]    #op12447
        m = max(m, f[i])    #op12449
        while q and f[i] >= f[q[-1]]:    #cond12452
            q.pop()    #op12459
        q.append(i)    #op12463
    return m    #io12470
