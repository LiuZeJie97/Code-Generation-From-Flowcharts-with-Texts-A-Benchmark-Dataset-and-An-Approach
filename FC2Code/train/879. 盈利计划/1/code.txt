def profitableSchemes(self, n: int, minProfit: int, group: List[int], profit: List[int]) -> int:
    MOD = 10**9 + 7
    length = len(group)
    dp = [[[0] * (minProfit + 1) for _ in range(n + 1)] for _ in range(length + 1)]
    dp[0][0][0] = 1
    for i in range(1, length + 1):
        members, earn = group[i - 1], profit[i - 1]
        for j in range(n + 1):
            for k in range(minProfit + 1):
                if j < members:
                    dp[i][j][k] = dp[i - 1][j][k]
                else:
                    dp[i][j][k] = dp[i - 1][j][k] + dp[i - 1][j - members][max(0, k - earn)]
                    dp[i][j][k] = dp[i][j][k] % MOD
    total = 0
    for j in range(n + 1):
        total += dp[length][j][minProfit]
        total = total % MOD
    return total
