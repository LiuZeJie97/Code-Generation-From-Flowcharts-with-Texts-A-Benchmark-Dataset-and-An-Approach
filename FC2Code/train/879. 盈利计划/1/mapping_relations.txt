def profitableSchemes(self, n: int, minProfit: int, group: List[int], profit: List[int]) -> int:    #io34129
    MOD = 10**9 + 7    #op34132
    length = len(group)    #op34134
    dp = [[[0] * (minProfit + 1) for _ in range(n + 1)] for _ in range(length + 1)]    #op34136
    dp[0][0][0] = 1    #op34138
    for i in range(1, length + 1):    #cond34143
        members, earn = group[i - 1], profit[i - 1]    #op34236
        for j in range(n + 1):    #cond34241
            for k in range(minProfit + 1):    #cond34287
                if j < members:    #cond34307
                    dp[i][j][k] = dp[i - 1][j][k]    #op34311
                else:    #None
                    dp[i][j][k] = dp[i - 1][j][k] + dp[i - 1][j - members][max(0, k - earn)]    #op34315
                    dp[i][j][k] = dp[i][j][k] % MOD    #op34317
    total = 0    #op34326
    for j in range(n + 1):    #cond34331
        total += dp[length][j][minProfit]    #op34340
        total = total % MOD    #op34342
    return total    #io34349
